generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://backend_dev:i am become death@ip-db-01.cl2wwmyu6vjw.eu-central-1.rds.amazonaws.com:5432/aot"
}

model User {
  id             Int            @id @default(autoincrement())
  email          String         @unique
  password       String         @db.VarChar(60)
  user_type      String         @default("user")
  ban_status     Boolean?       @default(false)
  unbanned_date  DateTime?
  mute_status    Boolean        @default(false)
  unmute_date    DateTime?
  random_name    String?        @db.VarChar(50)
  warnings_count Int
  Notification   Notification[]
}

model Community {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  author_id   Int
}

model CommunityUser {
  id           Int @id @default(autoincrement())
  user_id      Int
  community_id Int

  @@unique([user_id, community_id])
}

model Notification {
  notification_id Int      @id @default(autoincrement())
  user_ID         Int
  type            String   @db.VarChar(30)
  time_sent       DateTime
  opened          Boolean? @default(false)
  User            User     @relation(fields: [user_ID], references: [id])
}

model WordBlacklist {
  id        Int       @id @default(autoincrement())
  word      String    @unique
  dateAdded DateTime? @default(now())
}


/*  aici e pentru thread-uri adaugat de cosmin */

model Thread {
  id             Int       @id @default(autoincrement())
  name           String
  type           String
  description    String?
  owner_id       Int
  is_archived    Boolean
  creation_time  DateTime  @default(now())
}

model CommunityThread {
  thread_id      Int       
  community_id   Int
}

model Comment {
  id             Int       @id @default(autoincrement())
  content        String
  author_id      Int
  creation_time  DateTime  @default(now())
}

model ThreadDirectComments {
  id             Int       @id @default(autoincrement())
  thread         Thread
  comment        Comment
}