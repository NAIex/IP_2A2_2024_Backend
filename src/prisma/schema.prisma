generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://backend_dev:i am become death@ip-db-01.cl2wwmyu6vjw.eu-central-1.rds.amazonaws.com:5432/aot"
}

model User {
  id             Int            @id @default(autoincrement())
  email          String         @unique
  password       String         @db.VarChar(60)
  user_type      String         @default("user")
  ban_status     Boolean?       @default(false)
  unbanned_date  DateTime?
  mute_status    Boolean        @default(false)
  unmute_date    DateTime?
  random_name    String?        @db.VarChar(50)
  warnings_count Int
  Notification   Notification[]
}

model CommunityUser {
  id           Int @id @default(autoincrement())
  user_id      Int
  community_id Int

  @@unique([user_id, community_id])
}

model Community {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  author_id   Int
  archived    Boolean? @default(false)
  disabled    Boolean? @default(false)
}

model WordBlacklist {
  id        Int       @id @default(autoincrement())
  word      String    @unique
  dateAdded DateTime? @default(now())
}

model Notification {
  notification_id Int      @id @default(autoincrement())
  user_ID         Int
  type            String   @db.VarChar(30)
  time_sent       DateTime
  opened          Boolean? @default(false)
  User            User     @relation(fields: [user_ID], references: [id])
}

model Thread {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(50)
  type          String   @default("text")
  description   String?  @db.VarChar(255)
  owner_id      Int
  is_archived   Boolean? @default(false)
  creation_time DateTime @default(now())
}

model CommunityThread {
  id           Int @id @default(autoincrement())
  community_id Int
  thread_id    Int

  @@unique([community_id, thread_id])
}

model Comment {
  id        Int     @id @default(autoincrement())
  content   String  @db.VarChar(255)
  author_id Int
  like      Int     @default(0)
  dislike   Int     @default(0)
  deleted   Boolean @default(false)
}

model CommentSubcomment {
  id            Int @id @default(autoincrement())
  comment_id    Int
  subcomment_id Int

  @@unique([comment_id, subcomment_id])
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model TagRequest {
  id      Int    @id @default(autoincrement())
  tagName String
  userId  Int
}

model ThreadDirectComments {
  id         Int @id @default(autoincrement())
  thread_id  Int
  comment_id Int

  @@unique([comment_id, thread_id])
}

model ThreadTag {
  id        Int @id @default(autoincrement())
  tag_id    Int
  thread_id Int

  @@unique([thread_id, tag_id])
}
